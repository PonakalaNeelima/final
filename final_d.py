# -*- coding: utf-8 -*-
"""Final_d.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xBj0auMthVABIPGhhxDtliXcw8BgJgOT

# Importing libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report
from sklearn.model_selection import StratifiedKFold, cross_val_predict

df1 = pd.read_csv("https://raw.githubusercontent.com/PonakalaNeelima/Project/refs/heads/master/waterQuality1.csv")

df2 = pd.read_csv("https://raw.githubusercontent.com/PonakalaNeelima/Project/refs/heads/master/water_potability.csv")

"""# Data Exploration"""

df1.info()

df2.info()

"""# Data Preprocessing"""

df1['ammonia'] = pd.to_numeric(df1['ammonia'], errors='coerce')
df1['is_safe'] = pd.to_numeric(df1['is_safe'], errors='coerce')

df1.fillna(df1.median(), inplace=True)

df1.info()

df2.fillna(df2.median(), inplace=True)

df2.info()

"""# Data visualization

"""

corr = df1.corr()

plt.figure(figsize=(18, 14))  # Increase the figure size
sns.heatmap(
    corr,
    annot=True,
    fmt=".2f",
    cmap='coolwarm',
    annot_kws={"size": 12}  # Increase annotation font size
)
plt.xticks(rotation=45, ha='right')
plt.yticks(rotation=0)
plt.tight_layout()
plt.show()

corr = df2.corr()
sns.heatmap(corr, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)

"""# Creating Dataset

"""

df1 = df1.drop(columns=['aluminium', 'ammonia', 'barium', 'cadmium', 'chromium', 'copper', 'flouride', 'viruses', 'nitrites', 'perchlorate', 'radium', 'selenium', 'silver', 'uranium'])

df1.insert(0, 'ph', df2['ph'])

df1.insert(1, 'hardness', df2['Hardness'])

df1.insert(2, 'turbidity', df2['Turbidity'])

df=df1

df.info()

df.head()

df.to_csv("output.csv", index=False)